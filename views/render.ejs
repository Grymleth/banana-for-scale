<!DOCTYPE html>
<html>
	<head>
        <!-- Head -->
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="/css/render.css">
        <title>Banana For Scale | <%= title %></title>
    </head>
	<body>
		<p></p>
		<canvas id="myCanvas"></canvas>
		<script src="threejs/three.js"></script>
		<script src="threejs/OrbitControls.js"></script>
		<script src="threejs/GLTFLoader.js"></script>
		<script>
			var renderer = new THREE.WebGLRenderer({canvas: document.getElementById('myCanvas'), antialias: true });
			renderer.setClearColor(0xe5e5e5);
			renderer.setPixelRatio(window.devicePixelRatio);
			renderer.setSize(window.innerWidth, window.innerHeight);

			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);

			var controls = new THREE.OrbitControls(camera, renderer.domElement);
			camera.position.set(0, 2, 10);
			controls.update();

			var light = new THREE.AmbientLight(0x404040, 1);
			scene.add(light);

			// var dlight = new THREE.DirectionalLight(0xffffff, 1);
			// dlight.position.set(0,1,0);
			// dlight.castShadow = true;
			// scene.add(dlight);

			var plight = new THREE.PointLight(0xc4c4c4, 1);
			plight.position.set(0,1,500);
			scene.add(plight);

			var banana;
			var loader = new THREE.GLTFLoader();
			loader.load('threejs/banana.gltf', function(gltf){
				banana = gltf.scene.children[0];
				scene.add(gltf.scene);
				renderer.render(scene, camera);
			});
			
			// WTF, STRINGIFY OBJECT AND PARSE AGAIN
			var object = '<%- JSON.stringify(dimensions) %>';
			object = JSON.parse(object);

			var geometry = initGeometryFromObject(object);
			var material = new THREE.MeshLambertMaterial();
			var mesh = new THREE.Mesh(geometry, material);

			// create bounding box to get dimensions
			var boundingBox = new THREE.Box3().setFromObject(mesh);
			var boxSize = boundingBox.getSize();
			
			// offset mesh by the sum of the z of bounding box and half the length of banana
			mesh.position.z = - ((boxSize.x / 2) + (0.178/2));

			scene.add(mesh);

			render();

			function render(){
				renderer.render(scene, camera);
				controls.update();
				requestAnimationFrame(render);
			}

			function centiToMeter(centi){
				return centi / 100;
			}

			// returns a geometry object {box, sphere}
			function initGeometryFromObject(object){
				switch(object.type){
					case 'box':
						return new THREE.BoxGeometry(
							centiToMeter(object.width),
							centiToMeter(object.height),
							centiToMeter(object.depth),
						);
						break;
					case 'sphere':
						return new THREE.SphereGeometry(
							centiToMeter(object.radius),
							object.width_segments,
							object.height_segments
						);
						break;
					default:
						console.log('no support');
						break;
				}
			}
		</script>
	</body>
</html>